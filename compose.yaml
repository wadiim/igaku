services:
  client:
    image: node
    container_name: igaku-client
    working_dir: /app
    env_file:
      - .env
    environment:
      - VITE_PORT=${CLIENT_PORT}
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    volumes:
      - ./client:/app
    command: bash -c "npm install && npm run dev"

  nginx:
    image: nginx:latest
    container_name: igaku-nginx
    ports:
      - 4000:4000
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d/${NGINX_CONFIG_PROFILE:-default}:/etc/nginx/conf.d:ro
    networks:
      - igaku-network
    depends_on:
      auth:
        condition: service_started
      mail:
        condition: service_started
        required: false
      user:
        condition: service_started

  rabbitmq:
    image: rabbitmq:management
    container_name: igaku-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - igaku-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: igaku-elasticsearch
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - igaku-network
    profiles:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: igaku-logstash
    ports:
      - 5044:5044 # Beats port
      - 12201:12201/udp # GELF input port
      - 9600:9600
    volumes:
      - ./config/logstash/pipeline/:/usr/share/logstash/pipeline/:ro
    networks:
      - igaku-network
    healthcheck:
      test: ["CMD", "curl", "-s", "-XGET", "localhost:9600"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      - elasticsearch
    profiles:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: igaku-kibana
    ports:
      - 5601:5601
    env_file:
      - .env
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana_data:/usr/share/kibana/data
    networks:
      - igaku-network
    depends_on:
      - elasticsearch
    profiles:
      - elk

  user:
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "user-service/air.user.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-user-db
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    expose:
      - 8080
    volumes:
      - ./user-service:/app/user-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
        required: false
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-user-service"

  user-db:
    container_name: igaku-user-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${USER_DB_NAME}
      - POSTGRES_USER=${USER_DB_USER}
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
    ports:
      - 5432:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3

  auth:
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "auth-service/air.auth.toml"]
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    env_file:
      - .env
    expose:
      - 8080
    volumes:
      - ./auth-service:/app/auth-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
        required: false
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-auth-service"

  mail:
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "mail-service/air.mail.toml"]
    environment:
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
    env_file:
      - .env
    expose:
      - 8080
    volumes:
      - ./mail-service:/app/mail-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      logstash:
        condition: service_healthy
        required: false
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-mail-service"
    profiles:
      - mail

  encounter:
    container_name: igaku-encounter
    image: cosmtrek/air
    working_dir: /app
    command: ["-c", "encounter-service/air.encounter.toml"]
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=igaku-encounter-db
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    expose:
      - 8080
    volumes:
      - ./encounter-service:/app/encounter-service
      - ./commons:/app/commons
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    networks:
      - igaku-network
    depends_on:
      encounter-db:
        condition: service_healthy
      logstash:
        condition: service_healthy
        required: false
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://localhost:12201"
        tag: "igaku-encounter-service"
    profiles:
      - disabled

  encounter-db:
    container_name: igaku-encounter-db
    image: postgres
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${ENCOUNTER_DB_NAME}
      - POSTGRES_USER=${ENCOUNTER_DB_USER}
      - POSTGRES_PASSWORD=${ENCOUNTER_DB_PASSWORD}
    ports:
      - 5433:5432
    networks:
      - igaku-network
    healthcheck:
      test: pg_isready -U ${ENCOUNTER_DB_USER} -d ${ENCOUNTER_DB_NAME}
      interval: 2s
      timeout: 2s
      retries: 3
    profiles:
      - disabled

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: igaku-swagger-ui
    ports:
      - 8090:8080
    env_file:
      - config/swagger/${SWAGGER_CONFIG_PROFILE:-default}/env
    depends_on:
      auth:
        condition: service_started
      mail:
        condition: service_started
        required: false
      user:
        condition: service_started
    networks:
      - igaku-network

networks:
  igaku-network:
    driver: bridge

volumes:
  go-mod-cache:
    name: igaku-global-go-mod-cache
  go-build-cache:
    name: igaku-global-go-build-cache
  rabbitmq_data:
  rabbitmq_logs:
  esdata:
  kibana_data:
